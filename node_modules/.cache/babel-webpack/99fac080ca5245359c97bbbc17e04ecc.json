{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Subject, merge, fromEvent, timer } from 'rxjs';\n\nclass BnNgIdleService {\n  constructor() {\n    this.expired$ = new Subject();\n  }\n\n  startWatching(timeOutSeconds) {\n    this.idle$ = merge(fromEvent(document, 'mousemove'), fromEvent(document, 'click'), fromEvent(document, 'mousedown'), fromEvent(document, 'keypress'), fromEvent(document, 'DOMMouseScroll'), fromEvent(document, 'mousewheel'), fromEvent(document, 'touchmove'), fromEvent(document, 'MSPointerMove'), fromEvent(window, 'mousemove'), fromEvent(window, 'resize'));\n    this.timeOutMilliSeconds = timeOutSeconds * 1000;\n    this.idleSubscription = this.idle$.subscribe(res => {\n      this.resetTimer();\n    });\n    this.startTimer();\n    return this.expired$;\n  }\n\n  startTimer() {\n    this.timer$ = timer(this.timeOutMilliSeconds, this.timeOutMilliSeconds).subscribe(res => {\n      this.expired$.next(true);\n    });\n  }\n\n  resetTimer(timeOutSeconds) {\n    this.timer$.unsubscribe();\n\n    if (timeOutSeconds) {\n      this.timeOutMilliSeconds = timeOutSeconds * 1000;\n    }\n\n    this.startTimer();\n  }\n\n  stopTimer() {\n    this.timer$.unsubscribe();\n    this.idleSubscription.unsubscribe();\n  }\n\n}\n\nBnNgIdleService.ɵfac = function BnNgIdleService_Factory(t) {\n  return new (t || BnNgIdleService)();\n};\n\nBnNgIdleService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BnNgIdleService,\n  factory: BnNgIdleService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BnNgIdleService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass BnNgIdleModule {}\n\nBnNgIdleModule.ɵfac = function BnNgIdleModule_Factory(t) {\n  return new (t || BnNgIdleModule)();\n};\n\nBnNgIdleModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BnNgIdleModule\n});\nBnNgIdleModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [BnNgIdleService],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BnNgIdleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      providers: [BnNgIdleService],\n      exports: []\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of bn-ng-idle\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { BnNgIdleModule, BnNgIdleService };","map":{"version":3,"sources":["C:/Users/shubhamchavan/Desktop/EcomProject/EcomMixedAssessment/node_modules/bn-ng-idle/fesm2015/bn-ng-idle.mjs"],"names":["i0","Injectable","NgModule","Subject","merge","fromEvent","timer","BnNgIdleService","constructor","expired$","startWatching","timeOutSeconds","idle$","document","window","timeOutMilliSeconds","idleSubscription","subscribe","res","resetTimer","startTimer","timer$","next","unsubscribe","stopTimer","ɵfac","ɵprov","type","args","providedIn","BnNgIdleModule","ɵmod","ɵinj","imports","declarations","providers","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Subject, merge, fromEvent, timer } from 'rxjs';\n\nclass BnNgIdleService {\r\n    constructor() {\r\n        this.expired$ = new Subject();\r\n    }\r\n    startWatching(timeOutSeconds) {\r\n        this.idle$ = merge(fromEvent(document, 'mousemove'), fromEvent(document, 'click'), fromEvent(document, 'mousedown'), fromEvent(document, 'keypress'), fromEvent(document, 'DOMMouseScroll'), fromEvent(document, 'mousewheel'), fromEvent(document, 'touchmove'), fromEvent(document, 'MSPointerMove'), fromEvent(window, 'mousemove'), fromEvent(window, 'resize'));\r\n        this.timeOutMilliSeconds = timeOutSeconds * 1000;\r\n        this.idleSubscription = this.idle$.subscribe((res) => {\r\n            this.resetTimer();\r\n        });\r\n        this.startTimer();\r\n        return this.expired$;\r\n    }\r\n    startTimer() {\r\n        this.timer$ = timer(this.timeOutMilliSeconds, this.timeOutMilliSeconds).subscribe((res) => {\r\n            this.expired$.next(true);\r\n        });\r\n    }\r\n    resetTimer(timeOutSeconds) {\r\n        this.timer$.unsubscribe();\r\n        if (timeOutSeconds) {\r\n            this.timeOutMilliSeconds = timeOutSeconds * 1000;\r\n        }\r\n        this.startTimer();\r\n    }\r\n    stopTimer() {\r\n        this.timer$.unsubscribe();\r\n        this.idleSubscription.unsubscribe();\r\n    }\r\n}\r\nBnNgIdleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: BnNgIdleService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nBnNgIdleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: BnNgIdleService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: BnNgIdleService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass BnNgIdleModule {\r\n}\r\nBnNgIdleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: BnNgIdleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nBnNgIdleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: BnNgIdleModule });\r\nBnNgIdleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: BnNgIdleModule, providers: [BnNgIdleService], imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: BnNgIdleModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [],\r\n                    providers: [BnNgIdleService],\r\n                    exports: []\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of bn-ng-idle\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BnNgIdleModule, BnNgIdleService };\n"]},"metadata":{},"sourceType":"module"}